scp_program -> proc_of_removing_breakpoint (*
    -> rrel_params: ... (*
        -> rrel_1: rrel_in: _operator;;
        -> rrel_2: rrel_in: _scp_program;;
        -> rrel_3: rrel_out: _answer;;
    *);;
    -> rrel_operators: ... (*
        ->rrel_init: ..operator0 (*
            <- searchElStr5;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _scp_program;;
            -> rrel_2: rrel_scp_var: rrel_assign: _arc1;;
            -> rrel_3: rrel_scp_var: rrel_assign: _breakpoints;;
            -> rrel_4: rrel_scp_var: rrel_assign: _arc2;;
            -> rrel_5: rrel_fixed: rrel_scp_const: nrel_breakpoints;;
            => nrel_then: ..operator1;;
            => nrel_else: ..operator3;;
        *);;
        ->..operator1 (*
            <- searchElStr3;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _breakpoints;;
            -> rrel_2: rrel_scp_var: rrel_assign: rrel_pos_const_perm: _arc;;
            -> rrel_3: rrel_fixed: rrel_scp_var: _operator;;
            => nrel_then: ..operator2;;
            => nrel_else: ..operator3;;
        *);;
        ->..operator2 (*
            <- eraseEl;;
            -> rrel_1: rrel_fixed: rrel_scp_var: rrel_erase: _arc;;
            => nrel_goto: ..operator3;;
        *);;
        ->..operator3 (*
            <- call;;
            -> rrel_1: rrel_fixed: rrel_scp_const: proc_of_removing_context;;
            -> rrel_2: ... (*
                -> rrel_1: rrel_fixed: rrel_scp_var: _scp_program;;
            *);;
            -> rrel_3: rrel_assign: rrel_scp_var: _argument0;;
            => nrel_goto: ..operator4;;
        *);;
        ->..operator4 (*
            <- waitReturn;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _argument0;;
            => nrel_goto: ..operator5;;
        *);;
        ->..operator5 (*
            <- call;;
            -> rrel_1: rrel_fixed: rrel_scp_const: proc_of_generate_answer_construction_for_breakpoint;;
            -> rrel_2: ... (*
                -> rrel_1: rrel_fixed: rrel_scp_var: _scp_program;;
                -> rrel_2: rrel_scp_var: rrel_assign: _answer;;
            *);;
            -> rrel_3: rrel_assign: rrel_scp_var: _argument1;;
            => nrel_goto: ..operator6;;
        *);;
        ->..operator6 (*
            <- waitReturn;;
            -> rrel_1: rrel_fixed: rrel_scp_var: _argument1;;
            => nrel_goto: ..operator7;;
        *);;
        ->..operator7 (*
            <- return;;
        *);;
    *);;
*);;